# Values for kube-prometheus-stack
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'pagerduty'
      routes:
      - match:
          severity: critical
        receiver: 'pagerduty-critical'
      - match:
          severity: warning
        receiver: 'pagerduty-warning'
    receivers:
    - name: 'pagerduty-critical'
      pagerduty_configs:
      - routing_key_file: /etc/alertmanager/secrets/pagerduty-secret/routing-key
        severity: critical
        description: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        client: 'Kubernetes Monitoring'
    - name: 'pagerduty-warning'
      pagerduty_configs:
      - routing_key_file: /etc/alertmanager/secrets/pagerduty-secret/routing-key
        severity: warning
        description: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        client: 'Kubernetes Monitoring'
    - name: 'pagerduty'
      pagerduty_configs:
      - routing_key_file: /etc/alertmanager/secrets/pagerduty-secret/routing-key
        description: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        client: 'Kubernetes Monitoring'
  alertmanagerSpec:
    secrets: ['pagerduty-secret']
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 2Gi

grafana:
  adminPassword: admin
  persistence:
    enabled: true
    storageClassName: standard
    size: 1Gi
  service:
    port: 80
    targetPort: 3000
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Loki
        type: loki
        url: http://loki.logging.svc.cluster.local:3100
        access: proxy
  
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorNamespaceSelector: {}
    ruleSelectorNilUsesHelmValues: false
    ruleNamespaceSelector: {}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    additionalPrometheusRulesMap:
      custom-infrastructure:
        groups:
        - name: custom-infrastructure
          rules:
          - alert: IngressControllerDown
            expr: up{job="ingress-nginx-controller-metrics"} == 0 or absent(up{job="ingress-nginx-controller-metrics"}) == 1
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "Ingress controller is down"
          - alert: PodOOMKilled
            expr: increase(kube_pod_container_status_terminated_reason{reason="OOMKilled"}[5m]) > 0
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "Pod {{ $labels.pod }} was OOM killed in namespace {{ $labels.namespace }}"